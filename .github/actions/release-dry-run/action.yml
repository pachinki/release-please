name: "Release Dry Run"
description: "Compute the next semantic version using release-please in dry-run mode and emit parsed outputs."
author: "cai-platform"
branding:
  icon: "tag"
  color: "blue"

inputs:
  target-branch:
    description: "Target (default) branch to compare against"
    required: false
    default: "main"
  release-type:
    description: "release-please release type (simple|manifest|node|python|...)"
    required: false
    default: "simple"
  package-name:
    description: "Package / manifest key name passed to release-please"
    required: false
    default: "workflows"
  path:
    description: "Subdirectory root scanned for commits"
    required: false
    default: "."

outputs:
  predicted_tag:
    description: "Predicted next tag (vX.Y.Z)"
    value: ${{ steps.predict.outputs.predicted_tag }}
  predicted_version:
    description: "Predicted next semantic version (X.Y.Z)"
    value: ${{ steps.predict.outputs.predicted_version }}
  major:
    description: "Predicted next major version component"
    value: ${{ steps.predict.outputs.major }}
  minor:
    description: "Predicted next minor version component"
    value: ${{ steps.predict.outputs.minor }}
  patch:
    description: "Predicted next patch version component"
    value: ${{ steps.predict.outputs.patch }}
  final_exit_code:
    description: "Exit code returned by release-please CLI"
    value: ${{ steps.predict.outputs.final_exit_code }}

runs:
  using: "composite"
  steps:
    - name: Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: "20"

    - name: Install release-please CLI
      shell: bash
      run: npm install -g release-please

    - name: Fetch git history
      shell: bash
      run: |
        git fetch --prune --tags --unshallow 2>/dev/null || true
        git fetch --prune --tags --depth=200 2>/dev/null || true
        git fetch origin "${{ inputs['target-branch'] }}" --depth=200 2>/dev/null || true

    - name: Run release-please dry-run
      id: predict
      shell: bash
      run: |
        set -euo pipefail
        
        echo "Running release-please dry-run prediction..."
        
        # Run release-please in dry-run mode
        OUTPUT=$(release-please release-pr \
          --dry-run \
          --repo-url="${{ github.server_url }}/${{ github.repository }}" \
          --release-type="${{ inputs['release-type'] }}" \
          --path="${{ inputs['path'] }}" \
          --package-name="${{ inputs['package-name'] }}" \
          --target-branch="${{ inputs['target-branch'] }}" 2>&1) || EXIT_CODE=$?
        
        EXIT_CODE=${EXIT_CODE:-0}
        echo "final_exit_code=$EXIT_CODE" >> $GITHUB_OUTPUT
        
        # Extract version info from output
        if echo "$OUTPUT" | grep -q "would tag"; then
          TAG=$(echo "$OUTPUT" | grep "would tag" | sed 's/.*would tag //' | head -1)
          VERSION=${TAG#v}
          
          # Parse semantic version components
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          
          echo "predicted_tag=$TAG" >> $GITHUB_OUTPUT
          echo "predicted_version=$VERSION" >> $GITHUB_OUTPUT
          echo "major=$MAJOR" >> $GITHUB_OUTPUT
          echo "minor=$MINOR" >> $GITHUB_OUTPUT
          echo "patch=$PATCH" >> $GITHUB_OUTPUT
          
          echo "✅ Predicted next version: $TAG"
        else
          echo "No version change predicted"
          echo "predicted_tag=" >> $GITHUB_OUTPUT
          echo "predicted_version=" >> $GITHUB_OUTPUT
          echo "major=" >> $GITHUB_OUTPUT
          echo "minor=" >> $GITHUB_OUTPUT
          echo "patch=" >> $GITHUB_OUTPUT
        fi
        
        echo "Raw output:"
        echo "$OUTPUT"

    - name: Compute artifact name
      id: artifact_name
      shell: bash
      run: |
        set -euo pipefail
        BASE="${{ inputs['artifact-name'] }}"
        if [ "${{ inputs['unique-suffix'] }}" = "true" ]; then
          P="${{ inputs.path }}"
          [ "$P" = "." ] && P="root"
          SAFE=$(echo "$P" | tr '/ ' '__')
          VALUE="${BASE}-${SAFE}-${{ github.job }}-${{ github.run_attempt }}"
        else
          VALUE="$BASE"
        fi
        echo "Computed artifact name: $VALUE"
        echo "value=$VALUE" >> $GITHUB_OUTPUT

    - name: Upload log
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.artifact_name.outputs.value }}
        path: baseline.log
        if-no-files-found: warn

    - name: Major Bump Protection
      if: ${{ github.event_name == 'pull_request' && steps.forward_predict.outputs.bump_type == 'major' && inputs['enforce-major-approval'] == 'true' }}
      uses: actions/github-script@v7
      with:
        github-token: ${{ github.token }}
        script: |
          const {owner, repo} = context.repo;
          const issue_number = context.issue.number;
          
          // Add major-release and requires-approval labels
          try {
            await github.rest.issues.addLabels({
              owner,
              repo,
              issue_number,
              labels: ['major-release', 'requires-approval']
            });
            core.info('Added major-release and requires-approval labels');
          } catch (error) {
            core.warning(`Failed to add labels: ${error.message}`);
          }
          
          // Post warning comment about major bump
          const warningMarker = '<!-- major-bump-warning -->';
          const currentTag = `${{ steps.baseline.outputs.current_tag }}`;
          const nextTag = `${{ steps.forward_predict.outputs.next_tag }}`;
          
          const warningBody = warningMarker + `
          ## ⚠️ Major Version Bump Detected!
          
          This PR contains **breaking changes** that will create a major release:
          
          - **Current Version**: \`${currentTag}\`
          - **Next Version**: \`${nextTag}\`
          - **Impact**: This is a **BREAKING CHANGE** that may affect consumers
          
          ### Required Actions:
          1. 🏷️ **Labels Added**: \`major-release\`, \`requires-approval\`
          2. 👥 **Review Required**: A senior maintainer must approve this PR
          3. 📋 **Breaking Changes**: Document all breaking changes in the PR description
          4. 📢 **Communication**: Plan release announcement and migration guide
          
          ### Before Merging:
          - [ ] Breaking changes documented
          - [ ] Migration guide provided
          - [ ] Team/consumers notified
          - [ ] Senior maintainer approval obtained
          
          **Do not merge until all requirements are met!**`;
          
          // Check if warning comment already exists
          const comments = await github.paginate(github.rest.issues.listComments, {owner, repo, issue_number});
          const existingWarning = comments.find(c => c.body && c.body.includes(warningMarker));
          
          if (existingWarning) {
            await github.rest.issues.updateComment({
              owner,
              repo,
              comment_id: existingWarning.id,
              body: warningBody
            });
            core.info('Updated existing major bump warning comment');
          } else {
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number,
              body: warningBody
            });
            core.info('Created new major bump warning comment');
          }
          
          // Request reviews from repository maintainers (if CODEOWNERS exists)
          try {
            const codeowners = await github.rest.repos.getContent({
              owner,
              repo,
              path: '.github/CODEOWNERS'
            });
            core.info('CODEOWNERS file found - review requests should be automatic');
          } catch (error) {
            core.warning('No CODEOWNERS file found. Consider adding one for automatic review requests on major bumps.');
          }

    - name: PR Comment (Simple Version)
      if: ${{ github.event_name == 'pull_request' && inputs['pr-comment'] == 'true' }}
      uses: actions/github-script@v7
      with:
        github-token: ${{ github.token }}
        script: |
          const marker = '<!-- ' + `${{ inputs['pr-comment-marker'] }}` + ' -->';
          const currentTag = `${{ steps.baseline.outputs.current_tag }}` || 'none';
          const nextTag = `${{ steps.forward_predict.outputs.next_tag }}` || 'none';
          const bumpType = `${{ steps.forward_predict.outputs.bump_type }}` || 'none';
          
          // Add warning icon for major bumps
          const bumpTypeDisplay = bumpType === 'major' ? '⚠️ `major` (BREAKING)' : `\`${bumpType}\``;
          const headerEmoji = bumpType === 'major' ? '⚠️ ' : '';
          
          const body = marker + `
          ### ${headerEmoji}Release Dry Run Result

          | Field | Value |
          |-------|-------|
          | Current Tag | \`${currentTag}\` |
          | Next Tag After Merge | \`${nextTag}\` |
          | Bump Type | ${bumpTypeDisplay} |

          ${bumpType === 'major' ? '> **Warning**: This PR contains breaking changes! Check labels and approval requirements.' : ''}
          
          _Comment updates automatically on each run._`;

          const {owner, repo} = context.repo;
          const issue_number = context.issue.number;
          // Fetch existing comments and look for marker
          const comments = await github.paginate(github.rest.issues.listComments, {owner, repo, issue_number});
          const existing = comments.find(c => c.body && c.body.includes(marker));
          if (existing) {
            await github.rest.issues.updateComment({owner, repo, comment_id: existing.id, body});
            core.info('Updated existing dry-run comment.');
          } else {
            await github.rest.issues.createComment({owner, repo, issue_number, body});
            core.info('Created new dry-run comment.');
          }

    - name: Step Summary
      if: always()
      shell: bash
      run: |
        {
          echo '### Release Dry Run';
          echo '';
          echo '* Current tag: `${{ steps.baseline.outputs.current_tag }}`';
          echo '* Next tag: `${{ steps.forward_predict.outputs.next_tag }}`';
          echo '* Bump type: `${{ steps.forward_predict.outputs.bump_type }}`';
        } >> $GITHUB_STEP_SUMMARY
