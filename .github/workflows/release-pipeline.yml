name: Release Pipeline

on:
  # PR validation - run dry-run for all feature PRs
  pull_request:
    branches: [main]

  # Approve release PRs via release-please
  pull_request_target:
    types:
      - opened
      - reopened
      - synchronize

  # Automatic triggers
  push:
    branches:
      - main # Production release
      - "rc/**" # Release candidates

  # Manual trigger only for pre-release
  workflow_dispatch:
    inputs:
      notes:
        description: "Notes for pre-release"
        required: false
        type: string

permissions:
  contents: write
  pull-requests: write

concurrency:
  # Prevent concurrent releases but allow concurrent PRs
  group: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && 'release-main' || github.run_id }}
  cancel-in-progress: false

jobs:
  auto-approve-release:
    name: "Auto-approve Release PR"
    if: >-
      github.event_name == 'pull_request_target' &&
      github.event.pull_request.user.login == 'github-actions[bot]' &&
      github.event.pull_request.head.ref == 'release-please--branches--main'
    runs-on: ubuntu-latest
    steps:
      - name: Check for existing approval
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const {owner, repo} = context.repo;
            const pull_number = context.payload.pull_request.number;

            const reviews = await github.rest.pulls.listReviews({
              owner,
              repo,
              pull_number,
              per_page: 100,
            });

            const alreadyApproved = reviews.data.some(review =>
              review.user?.login === 'github-actions[bot]' && review.state === 'APPROVED'
            );

            if (alreadyApproved) {
              core.info('Release PR already has approval from github-actions[bot]; skipping.');
              return;
            }

            await github.rest.pulls.createReview({
              owner,
              repo,
              pull_number,
              event: 'APPROVE',
              body: 'Automated approval for release-please PR by github-actions[bot].',
            });
            core.info('Release PR approved successfully.');

  # Job 1: Validate PRs with version prediction (ONLY for PRs)
  validate-pr:
    name: "PR Validation & Version Prediction"
    if: github.event_name == 'pull_request'
    runs-on: self-hosted
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Predict and validate version
        id: dry-run
        uses: ./.github/actions/release-dry-run
        with:
          target-branch: main
          release-type: simple
          package-name: workflows
          path: "."

      - name: Summary
        run: |
          {
            echo '### ðŸ“Š Version Prediction Summary';
            echo "* **Predicted Version**: ${{ steps.dry-run.outputs.predicted_version || 'No changes detected' }}";
            echo "* **Bump Type**: ${{ steps.dry-run.outputs.bump_type || 'none' }}";
            echo "* **Current Tag**: ${{ steps.dry-run.outputs.current_tag }}";
          } >> $GITHUB_STEP_SUMMARY

  # Job 2: Create release candidates (ONLY for rc/* branches OR manual trigger)
  release-candidate:
    name: "Create Release Candidate"
    if: >
      (github.event_name == 'push' && startsWith(github.ref, 'refs/heads/rc/')) ||
      (github.event_name == 'workflow_dispatch')
    runs-on: self-hosted
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create release candidate
        id: rc
        uses: ./.github/actions/pre-release-rc
        with:
          target-branch: main
          release-type: simple
          package-name: workflows
          path: "."
          notes: ${{ github.event.inputs.notes || 'Release candidate for testing' }}
          create-release: "true"

      - name: Summary
        run: |
          {
            echo '### ðŸš€ Release Candidate Summary';
            echo "* **RC Tag**: ${{ steps.rc.outputs.rc_tag }}";
            echo "* **Base Version**: ${{ steps.rc.outputs.base_version }}";
            echo "* **RC Number**: ${{ steps.rc.outputs.rc_number }}";
          } >> $GITHUB_STEP_SUMMARY

  # Job 3: Create production releases (ONLY for main branch pushes)
  production-release:
    name: "Production Release"
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: self-hosted
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create production release
        id: release
        uses: ./.github/actions/release
        with:
          release-type: simple
          auto-merge-release-pr: "true"
          auto-merge-block-labels: "hold,no-automerge"
          major-approval-label: "major-approved"
          auto-merge-method: "MERGE"

      - name: Post-release actions
        if: steps.release.outputs.release_created == 'true'
        run: |
          echo "ðŸŽ‰ Production release created!"
          echo "Version: ${{ steps.release.outputs.version }}"
          echo "Tag: ${{ steps.release.outputs.tag_name }}"

          # Add any post-release automation here
          # e.g., trigger deployments, notifications, etc.

      - name: Auto-approve release PR
        if: steps.release.outputs.pull_request_number != ''
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const pr = Number('${{ steps.release.outputs.pull_request_number }}');
            if (!pr) {
              core.info('No release PR opened; skipping approval.');
              return;
            }
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr,
              event: 'APPROVE',
              body: 'Automated approval from release pipeline.'
            });
            core.info(`Approved release PR #${pr}`);
